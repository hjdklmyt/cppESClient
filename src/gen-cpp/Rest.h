/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Rest_H
#define Rest_H

#include <thrift/TDispatchProcessor.h>
#include "elasticsearch_types.h"

namespace elasticsearch { namespace thrift {

class RestIf {
 public:
  virtual ~RestIf() {}
  virtual void execute(RestResponse& _return, const RestRequest& request) = 0;
};

class RestIfFactory {
 public:
  typedef RestIf Handler;

  virtual ~RestIfFactory() {}

  virtual RestIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(RestIf* /* handler */) = 0;
};

class RestIfSingletonFactory : virtual public RestIfFactory {
 public:
  RestIfSingletonFactory(const boost::shared_ptr<RestIf>& iface) : iface_(iface) {}
  virtual ~RestIfSingletonFactory() {}

  virtual RestIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(RestIf* /* handler */) {}

 protected:
  boost::shared_ptr<RestIf> iface_;
};

class RestNull : virtual public RestIf {
 public:
  virtual ~RestNull() {}
  void execute(RestResponse& /* _return */, const RestRequest& /* request */) {
    return;
  }
};


class Rest_execute_args {
 public:

  Rest_execute_args() {
  }

  virtual ~Rest_execute_args() throw() {}

  RestRequest request;

  void __set_request(const RestRequest& val) {
    request = val;
  }

  bool operator == (const Rest_execute_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const Rest_execute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Rest_execute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Rest_execute_pargs {
 public:


  virtual ~Rest_execute_pargs() throw() {}

  const RestRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Rest_execute_result__isset {
  _Rest_execute_result__isset() : success(false) {}
  bool success;
} _Rest_execute_result__isset;

class Rest_execute_result {
 public:

  Rest_execute_result() {
  }

  virtual ~Rest_execute_result() throw() {}

  RestResponse success;

  _Rest_execute_result__isset __isset;

  void __set_success(const RestResponse& val) {
    success = val;
  }

  bool operator == (const Rest_execute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Rest_execute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Rest_execute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Rest_execute_presult__isset {
  _Rest_execute_presult__isset() : success(false) {}
  bool success;
} _Rest_execute_presult__isset;

class Rest_execute_presult {
 public:


  virtual ~Rest_execute_presult() throw() {}

  RestResponse* success;

  _Rest_execute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class RestClient : virtual public RestIf {
 public:
  RestClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  RestClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void execute(RestResponse& _return, const RestRequest& request);
  void send_execute(const RestRequest& request);
  void recv_execute(RestResponse& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class RestProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<RestIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (RestProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_execute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  RestProcessor(boost::shared_ptr<RestIf> iface) :
    iface_(iface) {
    processMap_["execute"] = &RestProcessor::process_execute;
  }

  virtual ~RestProcessor() {}
};

class RestProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  RestProcessorFactory(const ::boost::shared_ptr< RestIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< RestIfFactory > handlerFactory_;
};

class RestMultiface : virtual public RestIf {
 public:
  RestMultiface(std::vector<boost::shared_ptr<RestIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~RestMultiface() {}
 protected:
  std::vector<boost::shared_ptr<RestIf> > ifaces_;
  RestMultiface() {}
  void add(boost::shared_ptr<RestIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void execute(RestResponse& _return, const RestRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->execute(_return, request);
    }
    ifaces_[i]->execute(_return, request);
    return;
  }

};

}} // namespace

#endif
